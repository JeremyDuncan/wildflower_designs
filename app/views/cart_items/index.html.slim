h1.center-align.lobster-font Shopping Cart

= form_with(url: update_cart_path, method: :post, local: true, id: 'cart-form') do |f|
  .flex-container
    - total_price = 0
    - @cart_items.each do |item|
      - product = item.product
      - item_total_price = product.price * item.quantity
      - total_price += item_total_price
      .flex-item.quarter style="border-radius: 8px; margin: 10px; display: flex; flex-direction: column;"
        .card style="border-radius: 8px; display: flex; flex-direction: column;  flex-wrap: nowrap"
          span.card-title.center-align
            strong #{product.name}

          .flex-container style=" flex-wrap: nowrap"
            - if product.images.any?
              .card-image
                = image_tag product.images.first.image.thumb_medium.url,
                        class: 'responsive-img',
                        style: "border-radius: 4px; height: 100px; width: 100px; padding: 6px;"
            .card-content
              / span.card-title #{product.name}
              p.no-wrap  Price:    $#{product.price}
              .input-field style="display: flex"
                span style="display: flex; align-items: center"
                  | Qty:
                |&nbsp
                = f.number_field "cart_items[#{item.id}][quantity]",
                        value: item.quantity,
                        min: 1,
                        class: 'quantity-input',
                        style: "padding: 0px; margin: 0px; width: 40px;"
              p.no-wrap  Total:    $#{item_total_price}

          .card-action style="display: flex; justify-content: space-between"
            = link_to 'View', product_path(product), class: 'waves-effect waves-light btn'
            = link_to 'Remove', cart_item_path(item),
                    class: 'waves-effect waves-light btn red',
                    data: { turbo: true, turbo_method: :delete }

    - if @cart_items.any?
      .flex-item.whole
        .card-panel.wf-blue.bg-1.white-text
          h5 Total Amount: $#{total_price}
        .flex-container
          = f.submit 'Update Cart', class: 'btn waves-effect waves-light'


          / Hidden form for sending the invoice request
          = form_with url: request_invoice_cart_items_path, method: :post, id: 'hidden-invoice-form', style: 'display: none;' do


          = button_to 'Request Items', request_invoice_cart_items_path,
                  method: :post,
                  class: 'btn waves-effect waves-light',
                  id: 'request-items-btn'
#address-form-modal.modal style="display: none; height: 60vh"
  .modal-content
    h4 Enter Shipping Address
    = form_with url: add_address_path, method: :post, remote: true, id: 'address-form' do |f|
      .input-field
        = f.label :street_name
        = f.text_field :street_name
      .input-field
        = f.label :city
        = f.text_field :city
      .input-field
        = f.collection_select :state, state_options('United States'), :last, :first, {include_blank: 'State'}, {class: "browser-default"}
      .input-field
        = f.label :zip_code
        = f.text_field :zip_code
      button.btn.waves-effect.waves-light type="submit" Submit Address

#request-items-modal.modal style="display: none; height: 355px;"
  .modal-content
    h4 style="color: black; font-size: 1.8rem" Send Request?
    P You will be sent a preliminary invoice without shipping costs.
    p Wildflower Designs will contact you shortly about your request with shipping costs included.

    .modal-actions style="display: flex; flex-direction: column; justify-content: center"
      button.btn.waves-effect.waves-light.modal-close Confirm

style
  |
    .no-wrap {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .inline-field {
      display: flex;
      align-items: center;
    }
    #address-form-modal .input-field label {
      color: white;
    }

javascript:
    $(document).ready(function () {
        let isFormReadyForSubmission = false;
        $('select').formSelect();

        $('.quantity-input').on('change', function () {
            updateTotal();
        });

        function updateTotal() {
            let total = 0;
            $('.quantity-input').each(function () {
                const price = parseFloat($(this).data('price'));
                const quantity = parseInt($(this).val());
                total += price * quantity;
            });
            $('#total-amount').text('$' + total.toFixed(2));
        }

        $('#request-items-btn').on('click', function (e) {
            if (!isFormReadyForSubmission) {
                console.log("FIRST")
                e.preventDefault();
                // $('#request-items-modal').show();
                $('#address-form-modal').show(); // Show address form modal

                isFormReadyForSubmission = true;
            } else {
                $('#hidden-invoice-form').submit();
            }
        });

        $('#address-form').on('submit', function (event) {
            // On successful address form submission, show the confirmation modal
            console.log("Address form submitted successfully.");

            $('#address-form-modal').hide();
            $('#request-items-modal').show();
            // isFormReadyForSubmission = true;
        })

        $('.modal-close').on('click', function () {
            // Close the modal and reset form submission flag
            $('#request-items-modal').hide();
            $('#request-items-btn').click();
            isFormReadyForSubmission = false;
        });
    });

